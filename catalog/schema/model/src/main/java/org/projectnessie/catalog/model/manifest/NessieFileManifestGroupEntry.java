/*
 * Copyright (C) 2023 Dremio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.projectnessie.catalog.model.manifest;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import javax.annotation.Nullable;
import org.projectnessie.catalog.model.id.NessieId;
import org.projectnessie.nessie.immutables.NessieImmutable;

// Corresponds to a manifest-list entry (aka Iceberg's ManifestFile type)
@NessieImmutable
@JsonSerialize(as = ImmutableNessieFileManifestGroupEntry.class)
@JsonDeserialize(as = ImmutableNessieFileManifestGroupEntry.class)
public interface NessieFileManifestGroupEntry {

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // TODO this is the manifest path from the _imported_ manifest list
  String icebergManifestPath();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // TODO the length of the manifest file generated by the Nessie Catalog will be
  //  different from the manifest file length reported by Iceberg.
  Long icebergManifestLength();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  // TODO store the NessieId or both?
  Integer partitionSpecId();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  // TODO store the NessieId or both?
  Long addedSnapshotId();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  Integer addedDataFilesCount();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  Integer existingDataFilesCount();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  Integer deletedDataFilesCount();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  Long addedRowsCount();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  Long existingRowsCount();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  Long deletedRowsCount();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  Long sequenceNumber();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  Long minSequenceNumber();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  NessieFileContentType content();

  @Nullable
  @jakarta.annotation.Nullable
  @JsonInclude(JsonInclude.Include.NON_NULL)
  // Only in Iceberg
  byte[] keyMetadata();

  @JsonInclude(JsonInclude.Include.NON_NULL)
  NessieFieldsSummary partitions();

  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  NessieId manifestId();

  static Builder builder() {
    return ImmutableNessieFileManifestGroupEntry.builder();
  }

  interface Builder {
    @CanIgnoreReturnValue
    Builder from(NessieFileManifestGroupEntry listManifestEntry);

    @CanIgnoreReturnValue
    Builder clear();

    @CanIgnoreReturnValue
    Builder icebergManifestPath(String icebergManifestPath);

    @CanIgnoreReturnValue
    Builder icebergManifestLength(Long icebergManifestLength);

    @CanIgnoreReturnValue
    Builder partitionSpecId(Integer partitionSpecId);

    @CanIgnoreReturnValue
    Builder addedSnapshotId(@Nullable Long addedSnapshotId);

    @CanIgnoreReturnValue
    Builder addedDataFilesCount(@Nullable Integer addedDataFilesCount);

    @CanIgnoreReturnValue
    Builder existingDataFilesCount(@Nullable Integer existingDataFilesCount);

    @CanIgnoreReturnValue
    Builder deletedDataFilesCount(@Nullable Integer deletedDataFilesCount);

    @CanIgnoreReturnValue
    Builder addedRowsCount(@Nullable Long addedRowsCount);

    @CanIgnoreReturnValue
    Builder existingRowsCount(@Nullable Long existingRowsCount);

    @CanIgnoreReturnValue
    Builder deletedRowsCount(@Nullable Long existingRowsCount);

    @CanIgnoreReturnValue
    Builder sequenceNumber(@Nullable Long sequenceNumber);

    @CanIgnoreReturnValue
    Builder minSequenceNumber(@Nullable Long minSequenceNumber);

    @CanIgnoreReturnValue
    Builder content(@Nullable NessieFileContentType content);

    @CanIgnoreReturnValue
    Builder keyMetadata(@Nullable byte[] keyMetadata);

    @CanIgnoreReturnValue
    Builder manifestId(NessieId manifestId);

    @CanIgnoreReturnValue
    Builder partitions(NessieFieldsSummary partitions);

    NessieFileManifestGroupEntry build();
  }
}
