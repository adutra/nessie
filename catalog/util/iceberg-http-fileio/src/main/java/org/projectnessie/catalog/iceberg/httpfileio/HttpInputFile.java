/*
 * Copyright (C) 2023 Dremio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.projectnessie.catalog.iceberg.httpfileio;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import org.apache.iceberg.io.InputFile;
import org.apache.iceberg.io.SeekableInputStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

final class HttpInputFile implements InputFile {
  private static final Logger LOG = LoggerFactory.getLogger(HttpInputFile.class);

  private final String path;
  private Long length;
  private URLConnection prematureConnection;
  private String location;

  HttpInputFile(String path) {
    this(path, null);
  }

  HttpInputFile(String path, Long length) {
    this.path = path;
    // TODO the length that is already present is taken from
    //  org.projectnessie.catalog.formats.iceberg.manifest.IcebergManifestFile.manifestLength, which
    //  is (currently?) incorrect, because that refers to the file size when Iceberg wrote the
    //  manifest file, but the length of the manifest file generated by the Nessie Data Catalog WILL
    //  be DIFFERENT.
    // this.length = length;
  }

  @Override
  public long getLength() {
    // TODO the length that is already present is taken from
    //  org.projectnessie.catalog.formats.iceberg.manifest.IcebergManifestFile.manifestLength, which
    //  is (currently?) incorrect, because that refers to the file size when Iceberg wrote the
    //  manifest file, but the length of the manifest file generated by the Nessie Data Catalog WILL
    //  be DIFFERENT.
    if (length == null) {
      long len;
      try {
        // TODO info log level
        LOG.warn("Collecting content-length for {}", path);
        URLConnection urlConn = doOpenConn();
        len = urlConn.getHeaderFieldLong("Content-Length", -1L);
        if (len < 0L) {
          // TODO Nessie Catalog does not return a Content-Length header. We'd need a way to compute
          //  and memoize the size of the Avro file, but that size depends on the generated URLs
          //  inside the manifest-lists and manifest-files. Not particularly easy :(
          //  But Iceberg needs the length of the file - chicken & egg problem.
          // TODO info log level
          LOG.warn("Getting content-length by reading everything for {}", path);
          try (InputStream in = urlConn.getInputStream()) {
            byte[] buf = new byte[65536];
            long l = 0L;
            int rd;
            while ((rd = in.read(buf)) >= 0) {
              l += rd;
            }
            len = l;
          } finally {
            prematureConnection = null;
          }
        }
      } catch (IOException e) {
        throw new RuntimeException(e);
      }
      length = len;
    }
    return length;
  }

  private URLConnection doOpenConn() throws IOException {
    if (prematureConnection == null) {
      // TODO info log level
      LOG.warn("Opening connection to {}", path);
      prematureConnection = new URL(path).openConnection();
    }
    return prematureConnection;
  }

  @Override
  public String location() {
    if (location == null) {
      String contentDisp;
      try {
        contentDisp = doOpenConn().getHeaderField("Content-Disposition");
      } catch (IOException e) {
        throw new RuntimeException(e);
      }
      if (contentDisp != null
          && contentDisp.startsWith("attachment; filename=\"")
          && contentDisp.endsWith("\"")) {
        location =
            contentDisp.substring("attachment; filename=\"".length(), contentDisp.length() - 1);
        // TODO info log level
        LOG.warn("Using location from Content-Disposition header: {}", location);
      }
    }
    if (location == null) {
      LOG.warn("Using location from original path: {}", path);
      location = path;
    }
    return location;
  }

  @Override
  public SeekableInputStream newStream() {
    return new HttpSeekableInputStream(
        path,
        () -> {
          URLConnection urlConn = doOpenConn();
          try {
            return urlConn.getInputStream();
          } finally {
            prematureConnection = null;
          }
        });
  }

  @Override
  public boolean exists() {
    // TODO dynamic??
    return true;
  }
}
